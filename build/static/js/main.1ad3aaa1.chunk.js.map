{"version":3,"sources":["components/Home.js","mutations/index.js","hooks/useField.js","queries/index.js","hooks/useAuthData.js","components/SignupForm.js","components/LoginForm.js","components/LoggedIn.js","components/Logout.js","components/Menu.js","App.js","links/errorLink.js","links/authLink.js","links/httpLink.js","links/index.js","index.js"],"names":["Home","SIGNUP","gql","LOGIN","useField","type","useState","value","setValue","onChange","event","target","reset","CURRENT_USER","useAuthData","authData","client","useApolloClient","Object","keys","token","currentUser","localStorage","setItem","writeQuery","query","data","Signup","useMutation","onError","error","signup","signupData","resetUsername","usernameInput","resetPassword","passwordInput","resetEmail","emailInput","resetName","nameInput","history","useHistory","useEffect","push","onSubmit","preventDefault","variables","username","password","email","name","Login","login","loginData","LoggedIn","Logout","to","onClick","clear","resetStore","Menu","padding","paddingRight","readQuery","style","App","useQuery","currentUserLoading","loading","currentUserData","path","SignupForm","LoginForm","errorLink","graphQLErrors","networkError","forEach","message","console","authLink","setContext","_","headers","getItem","authorization","httpLink","HttpLink","uri","link","ApolloLink","from","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.1ad3aaa1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = () => {\n  return <div></div>;\n};\n\nexport default Home;\n","import { gql } from \"@apollo/client\";\n\nexport const SIGNUP = gql`\n  mutation signup(\n    $username: String!\n    $password: String!\n    $name: String!\n    $email: String!\n  ) {\n    signup(\n      username: $username\n      password: $password\n      name: $name\n      email: $email\n    ) {\n      token\n      currentUser {\n        username\n      }\n    }\n  }\n`;\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      currentUser {\n        username\n      }\n    }\n  }\n`;\n","import { useState } from \"react\";\n\nconst useField = (type) => {\n  const [value, setValue] = useState(\"\");\n\n  const onChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  const reset = () => {\n    setValue(\"\");\n  };\n\n  return {\n    type,\n    value,\n    onChange,\n    reset,\n  };\n};\n\nexport default useField;\n","import { gql } from \"@apollo/client\";\n\nexport const ALL_USERS = gql`\n  query allUsers {\n    allUsers {\n      name\n      username\n      email\n    }\n  }\n`;\n\nexport const ALL_RESUMES = gql`\n  query allResumes {\n    allResumes {\n      title\n      date\n      data\n      likes\n      description\n      tags\n      user\n    }\n  }\n`;\n\nexport const CURRENT_USER = gql`\n  query currentUser {\n    currentUser {\n      name\n      username\n      email\n    }\n  }\n`;\n","import { useApolloClient } from \"@apollo/client\";\nimport { CURRENT_USER } from \"../queries\";\n\nconst useAuthData = (authData) => {\n  const client = useApolloClient();\n  if (authData) {\n    const { token, currentUser } = authData[Object.keys(authData)[0]]; //Necessary bc keys are different for signup and login\n    localStorage.setItem(\"expertize-user-token\", token);\n    client.writeQuery({\n      query: CURRENT_USER,\n      data: { currentUser },\n    });\n\n    return { token, currentUser };\n  }\n\n  return null;\n};\n\nexport default useAuthData;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { SIGNUP } from \"../mutations\";\nimport useField from \"../hooks/useField\";\nimport useAuthData from \"../hooks/useAuthData\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signup = () => {\n  const [signup, { data: signupData }] = useMutation(SIGNUP, {\n    onError: (error) => {\n      if (error) {\n        // TODO: Notify user of failed signup\n        // console.error(\"Signup mutation error:\", error);\n      }\n    },\n  });\n  const { reset: resetUsername, ...usernameInput } = useField(\"text\");\n  const { reset: resetPassword, ...passwordInput } = useField(\"password\");\n  const { reset: resetEmail, ...emailInput } = useField(\"text\");\n  const { reset: resetName, ...nameInput } = useField(\"text\");\n  const authData = useAuthData(signupData);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (authData) {\n      history.push(\"/\");\n      resetUsername();\n      resetPassword();\n      resetEmail();\n      resetName();\n    }\n  }, [authData]); // eslint-disable-line\n\n  const handleSignup = (event) => {\n    event.preventDefault();\n    signup({\n      variables: {\n        username: usernameInput.value,\n        password: passwordInput.value,\n        email: emailInput.value,\n        name: nameInput.value,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h2>Signup</h2>\n      <form onSubmit={handleSignup}>\n        <div>\n          username:\n          <input {...usernameInput} />\n        </div>\n        <div>\n          email:\n          <input {...emailInput} />\n        </div>\n        <div>\n          name:\n          <input {...nameInput} />\n        </div>\n        <div>\n          password:\n          <input {...passwordInput} />\n        </div>\n        <button type=\"submit\">Sign Up</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Signup;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN } from \"../mutations\";\nimport useField from \"../hooks/useField\";\nimport { useHistory } from \"react-router-dom\";\nimport useAuthData from \"../hooks/useAuthData\";\n\nconst Login = () => {\n  const history = useHistory();\n  const [login, { data: loginData }] = useMutation(LOGIN, {\n    onError: (error) => {\n      if (error) {\n        // TODO: Notify user of failed login\n        // console.error(\"Login mutation error:\", error);\n      }\n    },\n  });\n  const { reset: resetEmail, ...emailInput } = useField(\"text\");\n  const { reset: resetPassword, ...passwordInput } = useField(\"password\");\n  const authData = useAuthData(loginData);\n\n  useEffect(() => {\n    if (authData) {\n      history.push(\"/\");\n      resetEmail();\n      resetPassword();\n    }\n  }, [authData]); // eslint-disable-line\n\n  const handleSignup = (event) => {\n    event.preventDefault();\n    login({\n      variables: {\n        email: emailInput.value,\n        password: passwordInput.value,\n      },\n    });\n  };\n\n  return (\n    <div>\n      <h2>Login</h2>\n      <form onSubmit={handleSignup}>\n        <div>\n          email:\n          <input {...emailInput} />\n        </div>\n        <div>\n          password:\n          <input {...passwordInput} />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\n\nconst LoggedIn = () => {\n  return (\n    <div>\n      Logged In!\n    </div>\n  );\n};\n\nexport default LoggedIn;\n","import React from \"react\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\n\nconst Logout = () => {\n  const client = useApolloClient();\n  const logout = () => {\n    localStorage.clear();\n    client.resetStore();\n  };\n\n  return (\n    <Link to=\"/\" onClick={logout}>\n      Logout\n    </Link>\n  );\n};\n\nexport default Logout;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useApolloClient } from \"@apollo/client\";\nimport { CURRENT_USER } from \"../queries\";\nimport Logout from \"./Logout\"\n\nconst Menu = () => {\n  const padding = {\n    paddingRight: 5,\n  };\n\n  const client = useApolloClient();\n  const { currentUser } = client.readQuery({ query: CURRENT_USER });\n\n  return (\n    <div>\n      <Link style={padding} to=\"/\">\n        Home\n      </Link>\n      {currentUser ? (\n        <span>Welcome {currentUser.name}\n        <Logout/>\n        </span>\n      ) : (\n        <span>\n          <Link style={padding} to=\"/signup\">\n            Sign Up\n          </Link>\n          <Link style={padding} to=\"/login\">\n            Login\n          </Link>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport SignupForm from \"./components/SignupForm\";\nimport LoginForm from \"./components/LoginForm\";\nimport LoggedIn from \"./components/LoggedIn\";\nimport { useQuery } from \"@apollo/client\";\nimport { CURRENT_USER } from \"./queries\";\nimport Menu from \"./components/Menu\";\n\nfunction App() {\n  const { loading: currentUserLoading, data: currentUserData } = useQuery(\n    CURRENT_USER\n  );\n\n  return currentUserLoading ? null : (\n    <div>\n      <Menu />\n      {currentUserData.currentUser ? <LoggedIn /> : <Home />}\n\n      <Switch>\n        <Route path=\"/signup\">\n          <SignupForm />\n        </Route>\n        <Route path=\"/login\">\n          <LoginForm />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { onError } from \"apollo-link-error\";\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, path }) =>\n      console.error(`[GraphQL error]: Message: ${message}, Path: ${path}`)\n    );\n  if (networkError) console.error(`[Network error]: ${networkError}`);\n});\n\nexport default errorLink;\n","import { setContext } from \"apollo-link-context\";\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"expertize-user-token\");\n  return {\n    headers: { ...headers, authorization: token ? `bearer ${token}` : null },\n  };\n});\n\nexport default authLink;\n","import { HttpLink } from \"@apollo/client\";\n\nconst httpLink = new HttpLink({\n  uri: \"/graphql\",\n});\n\nexport default httpLink;\n","import { ApolloLink } from \"@apollo/client\";\nimport errorLink from \"./errorLink\";\nimport authLink from \"./authLink\";\nimport httpLink from \"./httpLink\";\n\nconst link = ApolloLink.from([authLink, errorLink, httpLink]);\n\nexport default link;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport link from \"./links\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Router>\n      <App />\n    </Router>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}